Namespaces:
  =: io.murano.conflang.puppet
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system


Name: iotagent

Extends: std:Application

Properties:
  instance:
    Contract: $.class(res:Instance).notNull()
  query_context_path:
    Contract: $.string()
    Default: "/NGSI10/queryContext"
  iotagent_server_name:
    Contract: $.string()
    Default: "qa"
  iota_protocols:
    Contract: $.string()
    Default: ""[iotagentul, iotagentmqtt, iotagenttt]""
  http_proxy_gre:
    Contract: $.string()
    Default: "127.0.0.1:8888"
  iotagent_mongodb_port:
    Contract: $.string()
    Default: "27017"
  load_balancer_url:
    Contract: $.string()
    Default: "http://127.0.0.1:2000"
  iota_server_address:
    Contract: $.string()
    Default: "localhost"
  update_context_path:
    Contract: $.string()
    Default: "/NGSI10/updateContext"
  context_broker_endpoint:
    Contract: $.string()
    Default: "http//10.0.0.2:1026"
  iotagent_server_port:
    Contract: $.string()
    Default: "8080"
  iotagent_mongodb_host:
    Contract: $.string()
    Default: "127.0.0.1"
  register_context_path:
    Contract: $.string()
    Default: "/NGSI9/registerContext"
  iotagent:
    Contract: $.string()
    Default: "{ul: {order : "20", resource : "d", fileName:  "UL20Service"}}"
  iotagent_log_level:
    Contract: $.string()
    Default: "DEBUG"


Methods:
  initialize:
    Body:
      - $._environment: $.find(std:Environment).require()

  deploy:
    Body:
      - If: not $.getAttr(deployed, false)
        Then:
          - $._environment.reporter.report($this, 'Creating VM for deployment')
          - $securityGroupIngress:
            - ToPort: 80
              FromPort: 80
              IpProtocol: tcp
              External: true
            - ToPort: 22
              FromPort: 22
              IpProtocol: tcp
              External: true

          - $._environment.securityGroupManager.addGroupIngress($securityGroupIngress)
          - $.instance.addNid(696)
          - $.instance.deploy()
          - $resources: new(sys:Resources)
          # Deploy iotagent
          - $template: $resources.yaml('Deployiotagent.template').bind(dict(
                query_context_path => $.query_context_path,
                iotagent_server_name => $.iotagent_server_name,
                iota_protocols => $.iota_protocols,
                http_proxy_gre => $.http_proxy_gre,
                iotagent_mongodb_port => $.iotagent_mongodb_port,
                load_balancer_url => $.load_balancer_url,
                iota_server_address => $.iota_server_address,
                update_context_path => $.update_context_path,
                context_broker_endpoint => $.context_broker_endpoint,
                iotagent_server_port => $.iotagent_server_port,
                iotagent_mongodb_host => $.iotagent_mongodb_host,
                register_context_path => $.register_context_path,
                iotagent => $.iotagent,
                iotagent_log_level => $.iotagent_log_level))
          - $._environment.reporter.report($this, 'Instance is created. Deploying iotagent')
          - $.instance.agent.call($template, $resources)
          - If: $.instance.assignFloatingIp
            Then:
              - $host: $.instance.floatingIpAddress
            Else:
              - $host: $.instance.ipAddresses[0]
          - $._environment.reporter.report($this, format('iotagent is installed at {0}', $host))
          - $.setAttr(deployed, true)
