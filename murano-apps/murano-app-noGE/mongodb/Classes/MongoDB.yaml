#  Licensed under the Apache License, Version 2.0 (the "License"); you may
#  not use this file except in compliance with the License. You may obtain
#  a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.

Namespaces:
  =: io.murano.databases
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system


Name: MongoDB

Extends: std:Application

Properties:
  instance:
    Contract: $.class(res:Instance).notNull()
  database:
    Contract: $.string()
  username:
    Contract: $.string()
  password:
    Contract: $.string()

Methods:
  initialize:
    Body:
      - $._environment: $.find(std:Environment).require()

  deploy:
    Body:
      - If: not $.getAttr(deployed, false)
        Then:
          # Create VM for MongoDB
          - $._environment.reporter.report($this, 'Creating VM for MongoDB.')
          - $securityGroupIngress:
            - ToPort: 27017
              FromPort: 27017
              IpProtocol: tcp
              External: true
            - ToPort: 28017
              FromPort: 28017
              IpProtocol: tcp
              External: true
          - $._environment.securityGroupManager.addGroupIngress($securityGroupIngress)
          - $.instance.deploy()
          - $resources: new(sys:Resources)

          # Deploy MongoDB
          - $template: $resources.yaml('DeployMongoDB.template')
          - $._environment.reporter.report($this, 'Deploying MongoDB.')
          - $.instance.agent.call($template, $resources)

          # Configure MongoDB
          - $template: $resources.yaml('ConfigureMongoDB.template')
          - $._environment.reporter.report($this, 'Configuring MongoDB.')
          - $.instance.agent.call($template, $resources)

          # Add firewall rules
          - $template: $resources.yaml('AddFirewallRules.template')
          - $._environment.reporter.report($this, 'Adding firewall rules for MongoDB.')
          - $.instance.agent.call($template, $resources)

          # Create database on MongoDB
          - If: $.database != '' and $.database != null
            Then:
              - $template: $resources.yaml('CreateMongoDBDatabase.template').bind(dict(
                    database => $.database
                  ))
              - $._environment.reporter.report($this, 'Creating database on MongoDB.')
              - $.instance.agent.call($template, $resources)

              # Create user for database
              - If: $.username != '' and $.username != null
                Then:
                  - $template: $resources.yaml('CreateUserForMongoDBDatabase.template').bind(dict(
                        database => $.database,
                        username => $.username,
                        password => $.password
                      ))
                  - $._environment.reporter.report($this, 'Creating user for database on MongoDB.')
                  - $.instance.agent.call($template, $resources)

          # Report MongoDB information
          - If: $.instance.assignFloatingIp
            Then:
              - $host: $.instance.floatingIpAddress
            Else:
              - $host: $.instance.ipAddresses[0]
          - $._environment.reporter.report($this, format('MongoDB is available at {0}:{1}.', $host, 27017))
          - $._environment.reporter.report($this, format('MongoDB web admin endpoint is available at http://{0}:{1}.', $host, 28017))
          - $.setAttr(deployed, true)
